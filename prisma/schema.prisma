// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  nickname      String?
  website       String?
  company       String?
  beerInterests String[]       // Array of beer interests
  profileImage  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  emails        Email[]
  phoneNumbers  PhoneNumber[]
  addresses     Address[]
  createdEvents Event[]        @relation("EventCreator")
  bookings      Booking[]
}

model Email {
  id        String   @id @default(cuid())
  email     String   @unique
  verified  Boolean  @default(false)
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PhoneNumber {
  id          String   @id @default(cuid())
  phoneNumber String
  verified    Boolean  @default(false)
  isMain      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Address {
  id         String   @id @default(cuid())
  name       String   // Name for this address (e.g., "Home", "Work")
  street     String
  number     String?
  complement String?
  zipCode    String
  city       String
  state      String
  country    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations - User (mandatory)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations - Event (optional)
  eventId    String?
  event      Event?   @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([eventId])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  date        DateTime
  endDate     DateTime?
  capacity    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  creatorId   String
  creator     User      @relation("EventCreator", fields: [creatorId], references: [id])
  addresses   Address[] // An event can have multiple addresses (e.g., meeting points)
  bookings    Booking[]

  @@index([creatorId])
}

model Booking {
  id         String   @id @default(cuid())
  ticketType String
  quantity   Int
  totalPrice Float
  status     String   @default("pending") // pending, confirmed, canceled
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([eventId])
}
