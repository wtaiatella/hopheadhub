// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String
  nickname       String
  city           String
  state          String
  website        String?
  company        String?
  beerInterests  String[] // Array of beer interests
  profileImage   String?
  hashedPassword String? // Securely hashed password
  salt           String? // Salt used for password hashing
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  emails        Email[]
  phoneNumbers  PhoneNumber[]
  addresses     Address[]
  createdEvents Event[]       @relation("EventCreator")
  bookings      Booking[]
  accounts      Account[] // Social media accounts
}

model Email {
  id                         String    @id @default(cuid())
  email                      String    @unique
  isVerified                 Boolean   @default(false)
  isMain                     Boolean   @default(false)
  verifiedAt                 DateTime?
  verificationToken          String?   @unique
  verificationTokenExpiresAt DateTime?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PhoneNumber {
  id                         String    @id @default(cuid())
  phoneNumber                String
  isVerified                 Boolean   @default(false)
  isMain                     Boolean   @default(false)
  verifiedAt                 DateTime?
  verificationToken          String?   @unique
  verificationTokenExpiresAt DateTime?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Address {
  id         String   @id @default(cuid())
  name       String // Name for this address (e.g., "Home", "Work")
  street     String
  number     String?
  complement String?
  zipCode    String
  city       String
  state      String
  country    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations - User (mandatory)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations - Event (optional)
  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([eventId])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  date        DateTime
  endDate     DateTime?
  capacity    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  creatorId String
  creator   User      @relation("EventCreator", fields: [creatorId], references: [id])
  addresses Address[] // An event can have multiple addresses (e.g., meeting points)
  bookings  Booking[]

  @@index([creatorId])
}

model Booking {
  id         String   @id @default(cuid())
  ticketType String
  quantity   Int
  totalPrice Float
  status     String   @default("pending") // pending, confirmed, canceled
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([eventId])
}

// Social login accounts
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String // oauth, email, etc.
  provider          String // google, apple, facebook, etc.
  providerAccountId String // ID from the provider
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}
